"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceNaming = void 0;
// generated by cdktf get
// git::https://github.axa.com/datalab-italy/dl-utilities//resource-naming?ref=master
const cdktf_1 = require("cdktf");
class ResourceNaming extends cdktf_1.TerraformModule {
    constructor(scope, id, options) {
        super(scope, id, {
            source: 'git::https://github.axa.com/datalab-italy/dl-utilities//resource-naming?ref=master',
        });
        this.inputs = {};
        this.datalabPrefix = options.datalabPrefix;
        this.datalabProject = options.datalabProject;
        this.env = options.env;
        this.region = options.region;
        this.resourceName = options.resourceName;
        this.resourceType = options.resourceType;
    }
    get datalabPrefix() {
        return this.inputs['datalab_prefix'];
    }
    set datalabPrefix(value) {
        this.inputs['datalab_prefix'] = value;
    }
    get datalabProject() {
        return this.inputs['datalab_project'];
    }
    set datalabProject(value) {
        this.inputs['datalab_project'] = value;
    }
    get env() {
        return this.inputs['env'];
    }
    set env(value) {
        this.inputs['env'] = value;
    }
    get region() {
        return this.inputs['region'];
    }
    set region(value) {
        this.inputs['region'] = value;
    }
    get resourceName() {
        return this.inputs['resource_name'];
    }
    set resourceName(value) {
        this.inputs['resource_name'] = value;
    }
    get resourceType() {
        return this.inputs['resource_type'];
    }
    set resourceType(value) {
        this.inputs['resource_type'] = value;
    }
    get composedPrefixOutput() {
        return this.getString('composed_prefix');
    }
    get composedProjectPrefixOutput() {
        return this.getString('composed_project_prefix');
    }
    get composedResourceNameOutput() {
        return this.getString('composed_resource_name');
    }
    synthesizeAttributes() {
        return this.inputs;
    }
}
exports.ResourceNaming = ResourceNaming;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VfbmFtaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVzb3VyY2VfbmFtaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlCQUF5QjtBQUN6QixxRkFBcUY7QUFDckYsaUNBQXdDO0FBNEJ4QyxNQUFhLGNBQWUsU0FBUSx1QkFBZTtJQUVqRCxZQUFtQixLQUFnQixFQUFFLEVBQVUsRUFBRSxPQUE4QjtRQUM3RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLE1BQU0sRUFBRSxvRkFBb0Y7U0FDN0YsQ0FBQyxDQUFDO1FBSlksV0FBTSxHQUE0QixFQUFHLENBQUE7UUFLcEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQzNDLElBQUksQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQztRQUM3QyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztRQUN6QyxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUM7SUFDM0MsQ0FBQztJQUNELElBQVcsYUFBYTtRQUN0QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQXVCLENBQUM7SUFDN0QsQ0FBQztJQUNELElBQVcsYUFBYSxDQUFDLEtBQXlCO1FBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDeEMsQ0FBQztJQUNELElBQVcsY0FBYztRQUN2QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQXVCLENBQUM7SUFDOUQsQ0FBQztJQUNELElBQVcsY0FBYyxDQUFDLEtBQXlCO1FBQ2pELElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDekMsQ0FBQztJQUNELElBQVcsR0FBRztRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQXVCLENBQUM7SUFDbEQsQ0FBQztJQUNELElBQVcsR0FBRyxDQUFDLEtBQXlCO1FBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFDRCxJQUFXLE1BQU07UUFDZixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUF1QixDQUFDO0lBQ3JELENBQUM7SUFDRCxJQUFXLE1BQU0sQ0FBQyxLQUF5QjtRQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQVcsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsSUFBVyxZQUFZLENBQUMsS0FBYTtRQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUN2QyxDQUFDO0lBQ0QsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQVcsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsSUFBVyxZQUFZLENBQUMsS0FBYTtRQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUN2QyxDQUFDO0lBQ0QsSUFBVyxvQkFBb0I7UUFDN0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFDMUMsQ0FBQztJQUNELElBQVcsMkJBQTJCO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO0lBQ2xELENBQUM7SUFDRCxJQUFXLDBCQUEwQjtRQUNuQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtJQUNqRCxDQUFDO0lBQ1Msb0JBQW9CO1FBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0NBQ0Y7QUE3REQsd0NBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZ2VuZXJhdGVkIGJ5IGNka3RmIGdldFxuLy8gZ2l0OjpodHRwczovL2dpdGh1Yi5heGEuY29tL2RhdGFsYWItaXRhbHkvZGwtdXRpbGl0aWVzLy9yZXNvdXJjZS1uYW1pbmc/cmVmPW1hc3RlclxuaW1wb3J0IHsgVGVycmFmb3JtTW9kdWxlIH0gZnJvbSAnY2RrdGYnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5leHBvcnQgaW50ZXJmYWNlIFJlc291cmNlTmFtaW5nT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBEYXRhbGFiIHByZWZpeFxuICAgKi9cbiAgcmVhZG9ubHkgZGF0YWxhYlByZWZpeD86IHN0cmluZztcbiAgLyoqXG4gICAqIERhdGFsYWIgcHJvamVjdCBuYW1lXG4gICAqL1xuICByZWFkb25seSBkYXRhbGFiUHJvamVjdD86IHN0cmluZztcbiAgLyoqXG4gICAqIEVudmlyb25tZW50IFtub25wcm9kfHByZXByb2R8cHJvZF1cbiAgICovXG4gIHJlYWRvbmx5IGVudj86IHN0cmluZztcbiAgLyoqXG4gICAqIEFXUyBSZWdpb24gKGV4LiBldS1jZW50cmFsLTEpXG4gICAqL1xuICByZWFkb25seSByZWdpb24/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBOYW1lIHRvIGFkZCB0byByZXNvdXJjZSBuYW1lIChjYWxjdWxhdGVkKVxuICAgKi9cbiAgcmVhZG9ubHkgcmVzb3VyY2VOYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBV1MgUmVzb3VyY2UgdHlwZSB0aGF0IHRoZSBuYW1lIHdpbGwgYmUgZ2VuZXJhdGVkIGJ5IHRoaXMgbW9kdWxlLlxuICAgKi9cbiAgcmVhZG9ubHkgcmVzb3VyY2VUeXBlOiBzdHJpbmc7XG59XG5leHBvcnQgY2xhc3MgUmVzb3VyY2VOYW1pbmcgZXh0ZW5kcyBUZXJyYWZvcm1Nb2R1bGUge1xuICBwcml2YXRlIHJlYWRvbmx5IGlucHV0czogeyBbbmFtZTogc3RyaW5nXTogYW55IH0gPSB7IH1cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIG9wdGlvbnM6IFJlc291cmNlTmFtaW5nT3B0aW9ucykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgc291cmNlOiAnZ2l0OjpodHRwczovL2dpdGh1Yi5heGEuY29tL2RhdGFsYWItaXRhbHkvZGwtdXRpbGl0aWVzLy9yZXNvdXJjZS1uYW1pbmc/cmVmPW1hc3RlcicsXG4gICAgfSk7XG4gICAgdGhpcy5kYXRhbGFiUHJlZml4ID0gb3B0aW9ucy5kYXRhbGFiUHJlZml4O1xuICAgIHRoaXMuZGF0YWxhYlByb2plY3QgPSBvcHRpb25zLmRhdGFsYWJQcm9qZWN0O1xuICAgIHRoaXMuZW52ID0gb3B0aW9ucy5lbnY7XG4gICAgdGhpcy5yZWdpb24gPSBvcHRpb25zLnJlZ2lvbjtcbiAgICB0aGlzLnJlc291cmNlTmFtZSA9IG9wdGlvbnMucmVzb3VyY2VOYW1lO1xuICAgIHRoaXMucmVzb3VyY2VUeXBlID0gb3B0aW9ucy5yZXNvdXJjZVR5cGU7XG4gIH1cbiAgcHVibGljIGdldCBkYXRhbGFiUHJlZml4KCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRzWydkYXRhbGFiX3ByZWZpeCddIGFzIHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgfVxuICBwdWJsaWMgc2V0IGRhdGFsYWJQcmVmaXgodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuaW5wdXRzWydkYXRhbGFiX3ByZWZpeCddID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIGdldCBkYXRhbGFiUHJvamVjdCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmlucHV0c1snZGF0YWxhYl9wcm9qZWN0J10gYXMgc3RyaW5nIHwgdW5kZWZpbmVkO1xuICB9XG4gIHB1YmxpYyBzZXQgZGF0YWxhYlByb2plY3QodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuaW5wdXRzWydkYXRhbGFiX3Byb2plY3QnXSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyBnZXQgZW52KCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRzWydlbnYnXSBhcyBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIH1cbiAgcHVibGljIHNldCBlbnYodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuaW5wdXRzWydlbnYnXSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyBnZXQgcmVnaW9uKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRzWydyZWdpb24nXSBhcyBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIH1cbiAgcHVibGljIHNldCByZWdpb24odmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuaW5wdXRzWydyZWdpb24nXSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyBnZXQgcmVzb3VyY2VOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRzWydyZXNvdXJjZV9uYW1lJ10gYXMgc3RyaW5nO1xuICB9XG4gIHB1YmxpYyBzZXQgcmVzb3VyY2VOYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmlucHV0c1sncmVzb3VyY2VfbmFtZSddID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIGdldCByZXNvdXJjZVR5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dHNbJ3Jlc291cmNlX3R5cGUnXSBhcyBzdHJpbmc7XG4gIH1cbiAgcHVibGljIHNldCByZXNvdXJjZVR5cGUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuaW5wdXRzWydyZXNvdXJjZV90eXBlJ10gPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgZ2V0IGNvbXBvc2VkUHJlZml4T3V0cHV0KCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZygnY29tcG9zZWRfcHJlZml4JylcbiAgfVxuICBwdWJsaWMgZ2V0IGNvbXBvc2VkUHJvamVjdFByZWZpeE91dHB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoJ2NvbXBvc2VkX3Byb2plY3RfcHJlZml4JylcbiAgfVxuICBwdWJsaWMgZ2V0IGNvbXBvc2VkUmVzb3VyY2VOYW1lT3V0cHV0KCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZygnY29tcG9zZWRfcmVzb3VyY2VfbmFtZScpXG4gIH1cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0cztcbiAgfVxufVxuIl19